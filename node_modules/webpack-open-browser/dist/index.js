"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apps = exports.WebpackOpenBrowser = void 0;
const open_1 = __importDefault(require("open"));
function once(fn) {
    let called = false;
    let result;
    function enhancedFn(...args) {
        if (!called) {
            called = true;
            result = fn.apply(this, args);
            return result;
        }
        return result;
    }
    return enhancedFn;
}
function openBrowser({ url, browser, delay = 0, arguments: browserArgs, }) {
    setTimeout(() => {
        if (browser) {
            (0, open_1.default)(url, {
                app: {
                    name: browser,
                    arguments: browserArgs,
                },
            });
        }
        else {
            (0, open_1.default)(url);
        }
    }, delay);
}
const pluginName = 'WebpackOpenBrowser';
class WebpackOpenBrowser {
    constructor(options) {
        this.options = options;
        this.isWatchModel = false;
        const checkOption = (option) => {
            const isObject = option !== null && (typeof option === 'object' || typeof option === 'function');
            if (!isObject) {
                throw new TypeError('Option item must be object!');
            }
            if (!option.url) {
                throw new TypeError('You must specific the url to open!');
            }
        };
        if (Array.isArray(options)) {
            options.forEach(checkOption);
        }
        else {
            checkOption(options);
        }
    }
    apply(compiler) {
        compiler.hooks.watchRun.tap(`${pluginName}.recognizeWhetherRunInWatchMode`, () => {
            this.isWatchModel = true;
        });
        const handler = (stats) => {
            if (this.isWatchModel) {
                const callback = (option) => {
                    if (!stats.hasErrors() || option.ignoreErrors) {
                        openBrowser(option);
                    }
                };
                if (Array.isArray(this.options)) {
                    this.options.forEach(callback);
                }
                else {
                    callback(this.options);
                }
            }
        };
        compiler.hooks.done.tap(pluginName, once(handler));
    }
}
exports.WebpackOpenBrowser = WebpackOpenBrowser;
exports.default = WebpackOpenBrowser;
var open_2 = require("open");
Object.defineProperty(exports, "apps", { enumerable: true, get: function () { return open_2.apps; } });
